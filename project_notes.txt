PROJECT NOTES - AI WEB AGENT DEVELOPMENT
========================================

วันที่: 2025-06-03
เวลา: การอัปเดตไฟล์บันทึกโปรเจ็ค

สรุปความเข้าใจโปรเจ็ค:
-------------------------

เป็นการพัฒนา AI Web Agent ที่เป็น Chrome Extension มีฟีเจอร์หลักดังนี้:

1. WebSocket Communication System
   - การเชื่อมต่อกับ AI server ผ่าน WebSocket
   - ส่งและรับข้อความแบบ real-time
   - มี authentication system ด้วย token

2. JSON Command System
   - ระบบคำสั่งในรูปแบบ JSON สำหรับควบคุม DOM elements
   - รองรับคำสั่งต่างๆ เช่น click, highlight, scroll_to
   - ตัวอย่างคำสั่ง: {"tranType":"request","type":"command","action":"click","message":"","selector":"#fQuote > div:nth-child(4) > button"}
   - **[UPDATED]** ระบบตอบกลับในรูปแบบ: {"tranType":"response","type":"command","action":"click","message":"success","selector":"#fQuote > div:nth-child(4) > button"}

3. Chrome Extension Components
   - Background script (background.js)
   - Content script (content.js) 
   - Side panel interface
   - Message handling system

4. React UI Components
   - ChatPage: หน้าหลักสำหรับแชทกับ AI
   - LoginPage: หน้า authentication
   - Debug mode: สำหรับตรวจสอบสถานะการเชื่อมต่อ

5. หน้าที่หลักของระบบ
   - ใช้ AI สำหรับควบคุมการทำงานบนเว็บไซต์ต่างๆ
   - ส่งคำสั่งผ่าน WebSocket ไปยัง server
   - ประมวลผลคำสั่งและดำเนินการบน DOM

ปัญหาปัจจุบัน:
--------------
- **[FIXED]** JSON command ที่ส่งไปไม่ทำงาน - ได้เพิ่มการจัดการ JSON command structure แล้ว
- **[FIXED]** Console logs เยอะเกินไป - ได้ทำความสะอาด logs แล้ว เหลือเฉพาะที่จำเป็น
- **[FIXED]** Mobile responsive และ file attachment - ได้เพิ่มกลับมาแล้ว

สถานะการพัฒนา:
--------------
- มี debug panel สำหรับตรวจสอบสถานะ WebSocket
- มี authentication system
- มี command handler structure
- **[NEW]** เพิ่มระบบรับ-ส่ง JSON command ที่สมบูรณ์
- **[NEW]** รองรับการส่ง response กลับ server ในรูปแบบ tranType: "response"
- **[UPDATED]** ปรับปรุงระบบ logging ให้ส่งไปยัง content script แทน console.log โดยตรง
- **[UPDATED]** ลดการ log ที่ไม่จำเป็นออก เหลือเฉพาะข้อมูลสำคัญ
- **[UPDATED]** ปรับปรุง Mobile Responsive Design
- **[UPDATED]** เพิ่มระบบแนบไฟล์รูปภาพกลับมา

รายละเอียดหน้าต่างๆ ในระบบ:
============================

1. หน้า Index (/) - Landing Page
   - หน้าแรกของแอปพลิเคชัน
   - แสดงลิงก์ไปยังหน้า Login และ Chat
   - เป็นหน้าต้อนรับผู้ใช้

2. หน้า LoginPage (/login) - Authentication
   - ระบบล็อกอินด้วย Room และ Token
   - รองรับการจดจำข้อมูลการล็อกอิน
   - เมื่อล็อกอินสำเร็จจะนำไปยังหน้า Chat
   - มี validation สำหรับข้อมูลที่กรอก
   - รองรับทั้ง desktop และ mobile

3. หน้า ChatPage (/chat) - Main Interface
   ฟีเจอร์หลัก:
   - แชทกับ AI ผ่าน WebSocket connection
   - ส่งและรับข้อความแบบ real-time
   - รองรับการส่ง JSON command เพื่อควบคุม DOM
   - แสดงสถานะการเชื่อมต่อ (Connected/Disconnected)
   - แสดงข้อมูล Room และ Token ที่ใช้งาน

   ระบบแนบไฟล์:
   - รองรับการแนบรูปภาพ (image/*)
   - ขนาดไฟล์สูงสุด 10MB ต่อไฟล์
   - แสดง preview ไฟล์ที่เลือก
   - สามารถลบไฟล์ที่เลือกได้
   - แปลงไฟล์เป็น base64 ก่อนส่ง

   Debug Mode:
   - แสดงข้อมูลการเชื่อมต่อ WebSocket
   - แสดง Tab ID และ Room ที่ใช้งาน
   - แสดงจำนวน WebSocket messages
   - แสดงสถานะ Chrome Extension
   - แสดง Latest WebSocket Messages (5 ข้อความล่าสุด)
   - ปรับให้เหมาะกับ Mobile (แสดง 3 ข้อความ, JSON แบบ compact)

   Mobile Responsive:
   - ปรับขนาดฟอนต์และ spacing สำหรับหน้าจอเล็ก
   - Debug panel แสดงแบบ 1 คอลัมน์บน mobile
   - ปุ่มต่างๆ ปรับขนาดและซ่อนข้อความบางส่วน
   - ข้อความในแชทปรับ max-width ให้เหมาะสม
   - File preview ปรับให้แสดงได้ดีบน mobile

   Message Types:
   - User messages: ข้อความจากผู้ใช้ (สีฟ้า)
   - AI messages: ข้อความจาก AI (สีขาว)
   - Debug messages: ข้อความ debug (สีเหลือง)
   - รองรับการแสดงรูปภาพในข้อความ

   Chrome Extension Integration:
   - ส่งคำสั่ง JSON ไปยัง Background Script
   - รับผลลัพธ์การดำเนินการกลับมา
   - ส่ง console logs ไปยัง Content Script
   - รองรับ fallback เมื่อ Chrome Extension ไม่พร้อมใช้งาน

4. หน้า NotFound (/*) - Error Page
   - หน้าสำหรับ route ที่ไม่พบ
   - แสดงข้อความแจ้งเตือน
   - มีลิงก์กลับไปหน้าหลัก

Chrome Extension Components:
===========================

1. Background Script (background.js)
   - จัดการ Chrome Extension lifecycle
   - รับและประมวลผลคำสั่งจาก Side Panel
   - ส่งคำสั่งไปยัง Content Script
   - จัดการ Tab Management

2. Content Script (content.js)
   - รันบนหน้าเว็บที่ผู้ใช้เปิด
   - ดำเนินการ DOM manipulation
   - รับคำสั่งจาก Background Script
   - ส่งผลลัพธ์กลับ

3. Side Panel (React App)
   - UI หลักของ Chrome Extension
   - แสดงผลผ่าน index.html
   - รองรับ HashRouter สำหรับ routing

คำแนะนำการใช้งาน:
-----------------
- เปิด debug mode เพื่อดูสถานะการเชื่อมต่อ
- ตรวจสอบ WebSocket messages ใน debug panel
- ตรวจสอบ console logs สำหรับ debugging (logs จะแสดงใน tab ที่มี content script)
- **[NEW]** ส่ง JSON command ในรูปแบบ {"tranType":"request","type":"command","action":"click","selector":"..."}

การอัปเดตล่าสุด:
---------------
วันที่: 2025-06-03
เวลา: 09:15 น.
- เพิ่มระบบแนบไฟล์รูปภาพกลับมา (รองรับ 10MB, แสดง preview, ลบได้)
- ปรับปรุง Mobile Responsive Design ทั้งระบบ
- ปรับ Debug Mode ให้เหมาะกับ Mobile (1 คอลัมน์, JSON compact, แสดง 3 messages)
- ปรับขนาดฟอนต์, spacing และปุ่มต่างๆ สำหรับ Mobile
- เพิ่มรายละเอียดฟีเจอร์แต่ละหน้าใน project notes
- ใช้ useIsMobile hook สำหรับตรวจสอบขนาดหน้าจอ

Technical Architecture:
-----------------------
- React Side Panel เป็น UI หลัก
- WebSocket connection สำหรับการสื่อสารกับ AI server
- Chrome Extension APIs สำหรับการควบคุม DOM
- Content Script รันบนหน้าเว็บเป้าหมาย
- Background Script เป็นตัวกลางประมวลผลคำสั่ง
- JSON-based command protocol สำหรับการสั่งงาน

หมายเหตุ:
--------
- ไฟล์นี้จะถูกอัปเดตทุกครั้งที่มีการสั่งให้จำข้อมูลใหม่
- จะมีการบันทึกวันที่และเวลาของการอัปเดต
- ChatPage.tsx มีขนาด 470 บรรทัด ควรพิจารณา refactor ในอนาคต
